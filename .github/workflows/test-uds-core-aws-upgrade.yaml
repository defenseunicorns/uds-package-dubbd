name: Test UDS Core AWS Upgrade

on:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  test-upgrade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Run this step first so we can fail fast in case an invalid package name is provided
      - name: Get latest package version to upgrade from
        id: latest-package-version
        uses: ./.github/actions/latest-package-version
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-name: packages/uds-core-aws

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - uses: ./.github/actions/create-zarf-package
        name: Create Zarf package
        with:
          username: ${{ secrets.REGISTRY1_USERNAME }}
          password: ${{ secrets.REGISTRY1_PASSWORD }}
          working-dir: aws/uds-core-aws
          download-init-package: true
          timeout-minutes: 60

      - name: Set eks_cluster_name
        id: get_cluster_name
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "eks_cluster_name=uds-core-aws-upgrade-${SHA:0:7}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Package EKSCTL
        run: zarf package create --confirm
        working-directory: .github/workflows/eks

      - name: Create EKS cluster
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}

          zarf package deploy zarf-package-distro-eks-multi.tar.zst \
            --set cluster_name=${{ steps.get_cluster_name.outputs.eks_cluster_name }} \
            --confirm
        working-directory: .github/workflows/eks #just holds the zarf-config
        id: create-cluster

      - name: Show Cluster
        run: |
          kubectl get nodes
          kubectl config get-contexts

      - name: Zarf init
        run: |
          zarf init -a amd64 --components=git-server --confirm

      - name: Deploy latest package version
        env:
          SHA: ${{ github.sha }}
        run: |
          zarf package deploy \
            oci://ghcr.io/defenseunicorns/packages/uds-core-aws:${{ steps.latest-package-version.outputs.latest-package-version }} \
            --set ephemeral=true \
            --set name=${{ steps.get_cluster_name.outputs.eks_cluster_name }} \
            --set state_bucket_name="uds-ci-state-bucket" \
            --set state_key="tfstate/ci/upgrade/${SHA:0:7}-uds-core-aws.tfstate" \
            --set state_dynamodb_table_name="uds-ci-state-dynamodb" \
            --confirm
        working-directory: aws/uds-core-aws
        timeout-minutes: 60

      - name: Deploy UDS Core AWS
        env:
          SHA: ${{ github.sha }}
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}
          zarf package deploy zarf-package-*.tar.zst \
            --set ephemeral=true \
            --set name=${{ steps.get_cluster_name.outputs.eks_cluster_name }} \
            --set state_bucket_name="uds-ci-state-bucket" \
            --set state_key="tfstate/ci/upgrade/${SHA:0:7}-uds-core-aws.tfstate" \
            --set state_dynamodb_table_name="uds-ci-state-dynamodb" \
            --confirm
        working-directory: aws/uds-core-aws
        timeout-minutes: 60

      - name: Remove UDS Core AWS
        if: always()
        run: zarf package remove zarf-package-*.tar.zst --confirm
        working-directory: aws/uds-core-aws
        timeout-minutes: 60
        continue-on-error: true

      - name: Teardown EKS cluster
        if: always()
        # can't do a zarf package remove since there's no kubernetes cluster.
        run: |
          ./eksctl delete cluster -f config.yaml --disable-nodegroup-eviction --wait
        working-directory: .github/workflows/eks
        timeout-minutes: 60
        continue-on-error: true
