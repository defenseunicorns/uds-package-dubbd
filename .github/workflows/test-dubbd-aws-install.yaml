name: Test DUBBD AWS Package

on:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  test-clean-install-old:
    runs-on: ubuntu-latest

    steps:
      - name: Free GH runner space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - name: Set Terraform version
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - uses: ./.github/actions/create-zarf-package
        name: Create CI-DUBBD-IAC-AWS Zarf package
        with:
          username: ${{ secrets.IRON_BANK_ROBOT_USERNAME }}
          password: ${{ secrets.IRON_BANK_ROBOT_PASSWORD }}
          working-dir: .github/test-infra/ci-dubbd-iac-aws
          download-init-package: true
          timeout-minutes: 60

      - uses: ./.github/actions/create-zarf-package
        name: Create DUBBD-AWS Zarf package
        with:
          username: ${{ secrets.IRON_BANK_ROBOT_USERNAME }}
          password: ${{ secrets.IRON_BANK_ROBOT_PASSWORD }}
          working-dir: aws/dubbd-aws
          download-init-package: true
          timeout-minutes: 60

      - name: Set eks_cluster_name
        id: get_cluster_name
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "eks_cluster_name=dubbd-aws-${SHA:0:7}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Package EKSCTL
        run: zarf package create --confirm
        working-directory: .github/test-infra/eks

      - name: Create EKS cluster
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}

          zarf package deploy zarf-package-distro-eks-multi.tar.zst \
            --set cluster_name="${{ steps.get_cluster_name.outputs.eks_cluster_name }}" \
            --set permissions_boundary_arn="${{ secrets.OLD_PERMISSIONS_BOUNDARY_ARN }}" \
            --set permissions_boundary_name="${{ secrets.PERMISSIONS_BOUNDARY_NAME }}" \
            --confirm
        working-directory: .github/test-infra/eks #just holds the zarf-config
        id: create-cluster

      - name: Show Cluster
        run: |
          kubectl get nodes
          kubectl config get-contexts

      - name: Zarf init
        run: |
          zarf init -a amd64 --components=git-server --confirm

      - name: Deploy CI-DUBBD-IAC-AWS
        id: deploy-ci-dubbd-iac-aws
        env:
          SHA: ${{ github.sha }}
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}

          # deploys the IAC needed for dubbd-aws
          zarf package deploy zarf-package-*.tar.zst \
            --set ephemeral="true" \
            --set name="${{ steps.get_cluster_name.outputs.eks_cluster_name }}" \
            --set region="us-west-2" \
            --set state_bucket_name="uds-ci-state-bucket" \
            --set state_key="tfstate/ci/install/${SHA:0:7}-dubbd-aws.tfstate" \
            --set state_dynamodb_table_name="uds-ci-state-dynamodb" \
            --confirm

            # adds ZARF_PACKAGE_DEPLOY_SET env var for use in zarf package deploy
            echo "zarf_pkg_env_vars=$(cat setenv-dubbd-package.sh)" >> $GITHUB_OUTPUT
        working-directory: .github/test-infra/ci-dubbd-iac-aws
        timeout-minutes: 60

      - name: Deploy DUBBD-AWS
        env:
          SHA: ${{ github.sha }}
        run: |
          ${{ steps.deploy-ci-dubbd-iac-aws.outputs.zarf_pkg_env_vars }}
          env | grep ZARF_PACKAGE_DEPLOY_SET

          zarf package deploy zarf-package-*.tar.zst \
            --set domain="bigbang.dev" \
            --set key_file="bigbang.dev.key" \
            --set cert_file="bigbang.dev.cert" \
            --set private_admin_lb="true" \
            --set private_tenant_lb="true" \
            --confirm
        working-directory: aws/dubbd-aws
        timeout-minutes: 60

      - name: Remove DUBBD-AWS
        if: always()
        run: zarf package remove zarf-package-*.tar.zst --confirm
        working-directory: aws/dubbd-aws
        timeout-minutes: 60
        continue-on-error: true

      - name: Remove CI-DUBBD-IAC-AWS
        if: always()
        run: zarf package remove zarf-package-*.tar.zst --confirm
        working-directory: .github/test-infra/ci-dubbd-iac-aws
        timeout-minutes: 60
        continue-on-error: true

      - name: Teardown EKS cluster
        if: always()
        # can't do a zarf package remove since there's no kubernetes cluster.
        run: |
          ./eksctl delete cluster -f config.yaml --disable-nodegroup-eviction --wait
        working-directory: .github/test-infra/eks
        timeout-minutes: 60
        continue-on-error: true

  test-clean-install:
    runs-on: ubuntu-latest

    steps:
      - name: Free GH runner space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ORG_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - name: Set Terraform version
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - uses: ./.github/actions/create-zarf-package
        name: Create CI-DUBBD-IAC-AWS Zarf package
        with:
          username: ${{ secrets.REGISTRY1_USERNAME }}
          password: ${{ secrets.REGISTRY1_PASSWORD }}
          working-dir: .github/test-infra/ci-dubbd-iac-aws
          download-init-package: true
          timeout-minutes: 60

      - uses: ./.github/actions/create-zarf-package
        name: Create DUBBD-AWS Zarf package
        with:
          username: ${{ secrets.REGISTRY1_USERNAME }}
          password: ${{ secrets.REGISTRY1_PASSWORD }}
          working-dir: aws/dubbd-aws
          download-init-package: true
          timeout-minutes: 60

      - name: Set eks_cluster_name
        id: get_cluster_name
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "eks_cluster_name=dubbd-aws-${SHA:0:7}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Package EKSCTL
        run: zarf package create --confirm
        working-directory: .github/test-infra/eks

      - name: Create EKS cluster
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}

          zarf package deploy zarf-package-distro-eks-multi.tar.zst \
            --set cluster_name="${{ steps.get_cluster_name.outputs.eks_cluster_name }}" \
            --set permissions_boundary_arn="${{ secrets.PERMISSIONS_BOUNDARY_ARN }}" \
            --set permissions_boundary_name="${{ secrets.PERMISSIONS_BOUNDARY_NAME }}" \
            --confirm
        working-directory: .github/test-infra/eks #just holds the zarf-config
        id: create-cluster

      - name: Show Cluster
        run: |
          kubectl get nodes
          kubectl config get-contexts

      - name: Zarf init
        run: |
          zarf init -a amd64 --components=git-server --confirm

      - name: Deploy CI-DUBBD-IAC-AWS
        id: deploy-ci-dubbd-iac-aws
        env:
          SHA: ${{ github.sha }}
        run: |
          echo ${{ steps.get_cluster_name.outputs.eks_cluster_name }}

          # deploys the IAC needed for dubbd-aws
          zarf package deploy zarf-package-*.tar.zst \
            --set ephemeral="true" \
            --set name="${{ steps.get_cluster_name.outputs.eks_cluster_name }}" \
            --set region="us-west-2" \
            --set state_bucket_name="uds-aws-ci-commercial-us-west-2-5246-tfstate" \
            --set state_key="tfstate/ci/install/${SHA:0:7}-dubbd-aws.tfstate" \
            --set state_dynamodb_table_name="uds-aws-ci-commercial-org-us-west-2-5246-tfstate-lock" \
            --confirm

            # adds ZARF_PACKAGE_DEPLOY_SET env var for use in zarf package deploy
            echo "zarf_pkg_env_vars=$(cat setenv-dubbd-package.sh)" >> $GITHUB_OUTPUT
        working-directory: .github/test-infra/ci-dubbd-iac-aws
        timeout-minutes: 60

      - name: Deploy DUBBD-AWS
        env:
          SHA: ${{ github.sha }}
        run: |
          ${{ steps.deploy-ci-dubbd-iac-aws.outputs.zarf_pkg_env_vars }}
          env | grep ZARF_PACKAGE_DEPLOY_SET

          zarf package deploy zarf-package-*.tar.zst \
            --set domain="bigbang.dev" \
            --set key_file="bigbang.dev.key" \
            --set cert_file="bigbang.dev.cert" \
            --set private_admin_lb="true" \
            --set private_tenant_lb="true" \
            --confirm
        working-directory: aws/dubbd-aws
        timeout-minutes: 60

      - name: Remove DUBBD-AWS
        if: always()
        run: zarf package remove zarf-package-*.tar.zst --confirm
        working-directory: aws/dubbd-aws
        timeout-minutes: 60
        continue-on-error: true

      - name: Remove CI-DUBBD-IAC-AWS
        if: always()
        run: zarf package remove zarf-package-*.tar.zst --confirm
        working-directory: .github/test-infra/ci-dubbd-iac-aws
        timeout-minutes: 60
        continue-on-error: true

      - name: Teardown EKS cluster
        if: always()
        # can't do a zarf package remove since there's no kubernetes cluster.
        run: |
          echo "Sleeping before removing the cluster to see what went wrong."
          sleep 20m
          ./eksctl delete cluster -f config.yaml --disable-nodegroup-eviction --wait
        working-directory: .github/test-infra/eks
        timeout-minutes: 60
        continue-on-error: true
