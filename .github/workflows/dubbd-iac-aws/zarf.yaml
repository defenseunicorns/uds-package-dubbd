# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: dubbd-iac-aws
  description: "DUBBD IAC AWS"
  # x-release-please-start-version
  version: "0.7.0"
  # x-release-please-end
  url: https://p1.dso.mil/products/big-bang
  image: https://p1.dso.mil/img/Big_Bang_Color_Logo_White_text.de14c793.webp
  architecture: amd64
  authors: "@MxNxPx"
  source: https://github.com/defenseunicorns/uds-package-dubbd
  documentation: https://github.com/defenseunicorns/uds-package-dubbd
  vendor: Defense Unicorns

variables:
  - name: TERRAFORM_VERSION
  - name: TERRAFORM_PROVIDER_AWS_VERSION

  - name: STATE_BUCKET_NAME
    description: "Name of the pre-existing Terraform state S3 bucket"
  - name: STATE_KEY
    description: "Path to the state file key in the state bucket"
  - name: STATE_DYNAMODB_TABLE_NAME
    description: "Name of the DynamoDB table used for Terraform state locking"
  - name: REGION
    description: "The AWS region to run the Terraform in"

  - name: EPHEMERAL
    description: "Set whether the cluster should be considered ephemeral - if true all resources will be force destroyed on removal"
    default: "false"
  - name: LOKI_FORCE_DESTROY
    description: "If set to true, delete the S3 bucket and corresponding KMS key associated with the Loki bucket. Overrides ephemeral setting."
  - name: VELERO_FORCE_DESTROY
    description: "If set to true, delete the S3 bucket and corresponding KMS key associated with the Velero bucket. Overrides ephemeral setting."

components:
  - name: set-ephemeral
    required: true
    actions:
      onDeploy:
        before:
          - cmd: |
              if [ -z "${ZARF_VAR_LOKI_FORCE_DESTROY}" ]; then
                echo "${ZARF_VAR_EPHEMERAL}"
              else
                echo "${ZARF_VAR_LOKI_FORCE_DESTROY}"
              fi
            mute: true
            setVariables:
              - name: LOKI_FORCE_DESTROY
          - cmd: |
              if [ -z "${ZARF_VAR_VELERO_FORCE_DESTROY}" ]; then
                echo "${ZARF_VAR_EPHEMERAL}"
              else
                echo "${ZARF_VAR_VELERO_FORCE_DESTROY}"
              fi
            mute: true
            setVariables:
              - name: VELERO_FORCE_DESTROY
  - name: download-terraform
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              rm -f run/loki/terraform || true
              rm -f run/velero/terraform || true
            description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: "./extract-terraform.sh ###ZARF_PKG_TMPL_TERRAFORM_VERSION### ###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###"
    files:
      - source: extract.sh
        target: extract-terraform.sh
        executable: true
      # terraform binary into zarf package
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
  - name: loki-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: loki
    files:
      - source: loki/.terraform
        target: run/loki/.terraform
      - source: loki/main.tf
        target: run/loki/main.tf
      - source: loki/variables.tf
        target: run/loki/variables.tf
      - source: loki/output.tf
        target: run/loki/output.tf
      - source: loki/terraform.tfvars
        target: run/loki/terraform.tfvars
  - name: loki-execute-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-loki.tfstate/g'
            dir: run/loki
            setVariables:
              - name: STATE_KEY_LOKI
          - cmd: |
              ../terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_LOKI}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/loki
          - cmd: ../terraform plan
            dir: run/loki
          - cmd: sleep 15 #time to review
          - cmd: ../terraform apply -auto-approve
            dir: run/loki
      onRemove:
        before:
          - cmd: |
              if [ -d "run/loki" ]; then
                cd run/loki
                if [ "$(../terraform output force_destroy)" = true ]; then
                  ../terraform destroy -auto-approve
                else
                  echo "Skipping remove, force_destroy is set to false"
                fi
              else
                echo "Cannot remove: run/loki directory does not exist"
              fi
  - name: loki-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: ../terraform output -raw s3_bucket
            dir: run/loki
            setVariables:
              - name: LOKI_S3_BUCKET
          - cmd: ../terraform output -raw aws_region
            dir: run/loki
            setVariables:
              - name: LOKI_S3_AWS_REGION
          - cmd: ../terraform output -raw irsa_role_arn
            dir: run/loki
            setVariables:
              - name: LOKI_S3_ROLE_ARN
  - name: velero-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: velero
    files:
      - source: velero/.terraform
        target: run/velero/.terraform
      - source: velero/main.tf
        target: run/velero/main.tf
      - source: velero/variables.tf
        target: run/velero/variables.tf
      - source: velero/output.tf
        target: run/velero/output.tf
      - source: velero/terraform.tfvars
        target: run/velero/terraform.tfvars
  - name: velero-execute-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-velero.tfstate/g'
            dir: run/velero
            setVariables:
              - name: STATE_KEY_VELERO
          - cmd: "echo ${ZARF_VAR_STATE_KEY_VELERO}"
          - cmd: |
              ../terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_VELERO}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/velero
          - cmd: ../terraform plan
            dir: run/velero
          - cmd: sleep 15 #time to review
          - cmd: ../terraform apply -auto-approve
            dir: run/velero
      onRemove:
        before:
          - cmd: |
              if [ -d "run/velero" ]; then
                cd run/velero
                if [ "$(../terraform output force_destroy)" = true ]; then
                  ../terraform destroy -auto-approve
                else
                  echo "Skipping remove, force_destroy is set to false"
                fi
              else
                echo "Cannot remove: run/velero directory does not exist"
              fi
  - name: velero-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: ../terraform output -raw s3_bucket
            dir: run/velero
            setVariables:
              - name: VELERO_S3_BUCKET
          - cmd: ../terraform output -raw aws_region
            dir: run/velero
            setVariables:
              - name: VELERO_S3_AWS_REGION
          - cmd: ../terraform output -raw irsa_role_arn
            dir: run/velero
            setVariables:
              - name: VELERO_S3_ROLE_ARN
  - name: route53-policy-pre
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo "route53-policy"
            setVariables:
              - name: STATE_KEY_PREFIX
          - cmd: echo "${ZARF_VAR_STATE_KEY_PREFIX}-${ZARF_VAR_STATE_KEY}"
            setVariables:
              - name: ROUTE53_POLICY_STATE_KEY
  - name: route53-policy-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: route53-policy
    files:
      - source: route53-policy/.terraform
        target: run/route53-policy/.terraform
      - source: route53-policy/main.tf
        target: run/route53-policy/main.tf
      - source: route53-policy/variables.tf
        target: run/route53-policy/variables.tf
      - source: route53-policy/output.tf
        target: run/route53-policy/output.tf
      - source: route53-policy/terraform.tfvars
        target: run/route53-policy/terraform.tfvars
  - name: execute-route53-policy-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: "test -d ./route53-policy/ && chmod -R ugo+rwx ./route53-policy/ || echo $?"
            dir: run
          - cmd: |
              ../terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_ROUTE53_POLICY_STATE_KEY}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/route53-policy
          - cmd: ../terraform plan
            dir: run/route53-policy
          - cmd: sleep 15 #time to review
          - cmd: ../terraform apply -auto-approve
            dir: run/route53-policy
      onRemove:
        before:
          - cmd: |
              if [ -d "run/route53-policy" ]; then
                cd run/route53-policy
                ../terraform destroy -auto-approve
              else
                echo "Cannot remove: run/route53-policy directory does not exist"
              fi
  - name: route53-policy-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: ../terraform output -raw route53_role_arn
            dir: run/route53-policy
            setVariables:
              - name: ROUTE53_ROLE_ARN
  - name: export-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              cat <<EOF> setenv-dubbd-package.sh
              export ZARF_PACKAGE_DEPLOY_SET='{ \
              "EPHEMERAL": "${ZARF_VAR_EPHEMERAL}", \
              "ROUTE53_ROLE_ARN": "${ZARF_VAR_ROUTE53_ROLE_ARN}", \
              "STATE_BUCKET_NAME": "${ZARF_VAR_STATE_BUCKET_NAME}", \
              "STATE_KEY": "${ZARF_VAR_STATE_KEY}", \
              "STATE_DYNAMODB_TABLE_NAME": "${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}", \
              "REGION": "${ZARF_VAR_REGION}", \
              "LOKI_FORCE_DESTROY": "${ZARF_VAR_LOKI_FORCE_DESTROY}", \
              "VELERO_FORCE_DESTROY": "${ZARF_VAR_VELERO_FORCE_DESTROY}", \
              "LOKI_S3_BUCKET": "${ZARF_VAR_LOKI_S3_BUCKET}", \
              "LOKI_S3_AWS_REGION": "${ZARF_VAR_LOKI_S3_AWS_REGION}", \
              "LOKI_S3_ROLE_ARN": "${ZARF_VAR_LOKI_S3_ROLE_ARN}", \
              "VELERO_S3_BUCKET": "${ZARF_VAR_VELERO_S3_BUCKET}", \
              "VELERO_S3_AWS_REGION": "${ZARF_VAR_VELERO_S3_AWS_REGION}", \
              "VELERO_S3_ROLE_ARN": "${ZARF_VAR_VELERO_S3_ROLE_ARN}", \
              "ROUTE53_ROLE_ARN": "${ZARF_VAR_ROUTE53_ROLE_ARN}" \
              }'
              EOF

