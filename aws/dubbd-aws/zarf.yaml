# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: dubbd-aws
  description: "Defense Unicorns Big Bang Distro"
  # x-release-please-start-version
  version: "0.8.0"
  # x-release-please-end
  url: https://p1.dso.mil/products/big-bang
  image: https://p1.dso.mil/img/Big_Bang_Color_Logo_White_text.de14c793.webp
  # Big Bang / Iron Bank are only amd64
  architecture: amd64
  authors: "@runyontr"
  source: https://github.com/defenseunicorns/uds-package-dubbd
  documentation: https://github.com/defenseunicorns/uds-package-dubbd
  vendor: Defense Unicorns

variables:
  - name: EPHEMERAL
    description: "Set whether the cluster should be considered ephemeral - if true, deletes  PV resources on removal"
    default: "false"
  - name: PVC_RECLAIM_POLICY
    description: "Affects DUBBD's default storage class reclaimPolicy, either `Retain` or `Delete`. No effect if EBS CSI Driver is not installed. Overrides ephemeral setting."
    #default: "Intentionally no default value is configured, conditionally gets set via zarf component action logic"

  - name: PRIVATE_ADMIN_LB
    description: "Provision a private/internal load balancer for the admin ingress gateway"
    default: "true"
  - name: PRIVATE_TENANT_LB
    description: "Provision a private/internal load balancer for the tenant ingress gateway"
    default: "true"

  - name: LOKI_S3_BUCKET
    description: "AWS S3 bucket for use with Loki"
    #default: "Intentionally no default value is configured"
  - name: LOKI_S3_AWS_REGION
    description: "Region of the AWS S3 bucket for use with Loki"
    #default: "Intentionally no default value is configured"
  - name: LOKI_S3_ROLE_ARN
    description: "Role ARN of the AWS S3 bucket for use with Loki"
    #default: "Intentionally no default value is configured"
  - name: VELERO_S3_BUCKET
    description: "AWS S3 bucket for use with Velero"
    #default: "Intentionally no default value is configured"
  - name: VELERO_S3_AWS_REGION
    description: "Region of the AWS S3 bucket for use with Velero"
    #default: "Intentionally no default value is configured"
  - name: VELERO_S3_ROLE_ARN
    description: "Role ARN of the AWS S3 bucket for use with Velero"
    #default: "Intentionally no default value is configured"
  - name: ROUTE53_ROLE_ARN
    description: "Role ARN of the AWS S3 bucket for use with Route53 - external-dns"
    #default: "Intentionally no default value is configured"

  - name: EXEMPT_NAMESPACES
    description: "List of namespaces to be exempt from cluster policies (must contain zarf)"
    default: '[ "zarf", "calico-apiserver", "calico-system", "tigera-operator" ]'

  - name: DUBBD_VALUES
    description: "Path to a local values file that includes configuration to be used at deploy time (does not support enabling or disabling charts)"
    default: deploy-dubbd-values.yaml
    prompt: false
    type: file
    autoIndent: true


components:
  - name: set-ephemeral
    required: true
    import:
      path: ../../defense-unicorns-distro
    actions:
      onDeploy:
        before:
          - cmd: |
              if [ -z "${ZARF_VAR_LOKI_FORCE_DESTROY}" ]; then
                echo "${ZARF_VAR_EPHEMERAL}"
              else
                echo "${ZARF_VAR_LOKI_FORCE_DESTROY}"
              fi
            mute: true
            setVariables:
              - name: LOKI_FORCE_DESTROY
          - cmd: |
              if [ -z "${ZARF_VAR_VELERO_FORCE_DESTROY}" ]; then
                echo "${ZARF_VAR_EPHEMERAL}"
              else
                echo "${ZARF_VAR_VELERO_FORCE_DESTROY}"
              fi
            mute: true
            setVariables:
              - name: VELERO_FORCE_DESTROY
  - name: preflight
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: load-certs
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: generate-credentials
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: download-flux
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: storage-class
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              if [ "${ZARF_VAR_IS_UPGRADE}" = "true" ] && ./zarf tools kubectl get statefulset -n tempo tempo-tempo >/dev/null 2>&1; then
                if ! [ "$(./zarf tools kubectl get statefulset -n tempo tempo-tempo -o jsonpath='{.spec.volumeClaimTemplates[0].spec.storageClassName}' 2>&1)" = "" ]; then
                  ./zarf tools kubectl get statefulset -n tempo tempo-tempo -o jsonpath='{.spec.volumeClaimTemplates[0].spec.storageClassName}' 2>&1
                fi
              else
                if ./zarf tools kubectl get csidrivers ebs.csi.aws.com >/dev/null 2>&1 ; then
                  ./zarf tools kubectl apply -f dubbd-storage-class.yaml >/dev/null 2>&1 && echo dubbd-default-sc
                else
                  ./zarf tools kubectl get storageclass --output=jsonpath='{range .items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")]}{.metadata.name}{end}'
                fi
              fi
            mute: true
            description: "Determine storage class to use"
            setVariables:
              - name: STORAGE_CLASS_NAME
          - cmd: rm -rf dubbd-storage-class.yaml
            mute: true
    files:
      - source: ../k8s-manifests/dubbd-storage-class.yaml
        target: dubbd-storage-class.yaml
  - name: dubbd-pre-upgrade
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: bigbang
    required: true
    import:
      path: ../../defense-unicorns-distro
    extensions:
      bigbang:
        version: "###ZARF_PKG_TMPL_BIGBANG_VERSION###"
        valuesFiles:
          - ../values/aws-istio.yaml
          - ../values/aws-loki.yaml
          - ../values/aws-velero.yaml
          - ../values/aws-storage-class.yaml
          - ../values/add-dubbd-values.yaml
    actions:
      onDeploy:
        before:
          - cmd: |
              ./zarf tools kubectl label ns -l app.kubernetes.io/part-of=dubbd-aws zarf.dev/agent-
            description: "Remove Zarf ignore namespace labels for DUBBD AWS"
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system admin-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_ADMIN_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if admin ingressgateway needs an update"
            mute: true
            setVariables:
              - name: ADMIN_INGRESS_UPDATE
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system tenant-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_TENANT_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if tenant ingressgateway needs an update"
            mute: true
            setVariables:
              - name: TENANT_INGRESS_UPDATE
  - name: external-dns-k8s-manifests
    required: true
    import:
      path: ../external-dns
  - name: external-dns-chart
    required: true
    import:
      path: ../external-dns
  - name: keycloak
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: dubbd-post-upgrade
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              if [ "${ZARF_VAR_IS_UPGRADE}" = "true" ]; then
                if [ "${ZARF_VAR_ADMIN_INGRESS_UPDATE}" = "true" ]; then
                  ./zarf tools kubectl delete svc -n istio-system admin-ingressgateway
                  echo "Admin ingress gateway configuration was updated. You may need to update DNS records to point to the newly provisioned loadbalancer."
                  echo "The new hostname can be pulled with: zarf tools kubectl get svc -n istio-system admin-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                fi
                if [ "${ZARF_VAR_TENANT_INGRESS_UPDATE}" = "true" ]; then
                  ./zarf tools kubectl delete svc -n istio-system tenant-ingressgateway
                  echo "Tenant ingress gateway configuration was updated. You may need to update DNS records to point to the newly provisioned loadbalancer."
                  echo "The new hostname can be pulled with: zarf tools kubectl get svc -n istio-system tenant-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                fi
              fi
            description: "DUBBD post-upgrade: Recreate Istio Ingress Gateway resources if their configuration changed"
