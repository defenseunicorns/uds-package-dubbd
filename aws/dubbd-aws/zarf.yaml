# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: dubbd-aws
  description: "Defense Unicorns Big Bang Distro"
  # x-release-please-start-version
  version: "0.3.0"
  # x-release-please-end
  url: https://p1.dso.mil/products/big-bang
  image: https://p1.dso.mil/img/Big_Bang_Color_Logo_White_text.de14c793.webp
  # Big Bang / Iron Bank are only amd64
  architecture: amd64
  authors: "@runyontr"
  source: https://github.com/defenseunicorns/uds-package-dubbd
  documentation: https://github.com/defenseunicorns/uds-package-dubbd
  vendor: Defense Unicorns

variables:
- name: TERRAFORM_VERSION
- name: TERRAFORM_PROVIDER_AWS_VERSION

- name: REGION
  description: "The AWS region to run the Terraform in"
- name: STATE_BUCKET_NAME
  description: "Name of the pre-existing Terraform state S3 bucket"
- name: STATE_DYNAMODB_TABLE_NAME
  description: "Name of the DynamoDB table used for Terraform state locking"
- name: STATE_KEY
  description: "Path to the state file key in the state bucket"

- name: PRIVATE_ADMIN_LB
  description: "Provision a private/internal load balancer for the admin ingress gateway"
  default: "true"
- name: PRIVATE_TENANT_LB
  description: "Provision a private/internal load balancer for the tenant ingress gateway"
  default: "true"

- name: EPHEMERAL
  description: "Provide a means to force destroy Loki and Velero storage (S3) buckets even if it contains data"
  default: "false"

components:
  - name: download-terraform
    required: true
    actions:
      onDeploy:
        after:
          - cmd: rm -f run/loki/terraform || true
            description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: rm -f run/velero/terraform || true
            description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: "./extract-terraform.sh ###ZARF_PKG_TMPL_TERRAFORM_VERSION### ###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###"
          # - cmd: rm -rf tmp
    files:
      - source: ../extract.sh
        target: extract-terraform.sh
        executable: true
     # terraform binary into zarf package
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
  - name: s3-terraform-setup
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: ../s3
    files:
    - source: ../s3/.terraform
      target: run/loki/.terraform
    - source: ../s3/main.tf
      target: run/loki/main.tf
    - source: ../s3/variables.tf
      target: run/loki/variables.tf
    - source: ../s3/output.tf
      target: run/loki/output.tf
    - source: ../s3/tf-loki.tfvars
      target: run/loki/tf-loki.tfvars

    - source: ../s3/.terraform
      target: run/velero/.terraform
    - source: ../s3/main.tf
      target: run/velero/main.tf
    - source: ../s3/variables.tf
      target: run/velero/variables.tf
    - source: ../s3/output.tf
      target: run/velero/output.tf
    - source: ../s3/tf-velero.tfvars
      target: run/velero/tf-velero.tfvars
  - name: loki-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: "echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-loki.tfstate/g'"
            dir: run/loki
            setVariables:
              - name: STATE_KEY_LOKI
          - cmd: |
              terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_LOKI}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/loki
          - cmd: "terraform plan -var-file=tf-loki.tfvars"
            dir: run/loki
          - cmd: sleep 15 #time to review
          - cmd: "terraform apply -var-file=tf-loki.tfvars -auto-approve"
            dir: run/loki
        after:
          - cmd: "terraform output -raw s3_bucket"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_BUCKET
          - cmd: "terraform output -raw aws_region"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_AWS_REGION
          - cmd: "terraform output -raw irsa_role"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_ROLE_ARN
      onRemove:
        before:
          - cmd: |
              if [ -d "run/loki" ]; then
                cd run/loki
                if [ "$(terraform output force_destroy)" = true ]; then
                  terraform destroy -var-file=tf-loki.tfvars -auto-approve
                else
                  echo "Skipping loki bucket removal, ephemeral is set to false"
                fi
              else
                echo "Cannot remove bucket: run/loki directory does not exist"
              fi
  - name: velero-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: "echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-velero.tfstate/g'"
            dir: run/velero
            setVariables:
              - name: STATE_KEY_VELERO
          - cmd: |
              terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_VELERO}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/velero
          - cmd: "terraform plan -var-file=tf-velero.tfvars"
            dir: run/velero
          - cmd: sleep 15 #time to review
          - cmd: "terraform apply -var-file=tf-velero.tfvars -auto-approve"
            dir: run/velero
        after:
          - cmd: "terraform output -raw s3_bucket"
            dir: run/velero
            setVariables:
              - name: VELERO_S3_BUCKET
          - cmd: "terraform output -raw aws_region"
            dir: run/velero
            setVariables:
              - name: VELERO_S3_AWS_REGION
          - cmd: "terraform output -raw irsa_role"
            dir: run/velero
            setVariables:
              - name: VELERO_S3_ROLE_ARN
      onRemove:
        before:
          - cmd: |
              if [ -d "run/velero" ]; then
                cd run/velero
                if [ "$(terraform output force_destroy)" = true ]; then
                  terraform destroy -var-file=tf-velero.tfvars -auto-approve
                else
                  echo "Skipping velero bucket removal, ephemeral is set to false"
                fi
              else
                echo "Cannot remove velero bucket: run/velero directory does not exist"
              fi
  - name: load-certs
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: preflight
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: download-flux
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: bigbang
    required: true
    import:
      path: ../../defense-unicorns-distro
    extensions:
      bigbang:
        version: "###ZARF_PKG_TMPL_BIGBANG_VERSION###"
        valuesFiles:
        - ../values/aws-istio.yaml
        - ../values/aws-loki.yaml
    actions:
      onDeploy:
        before:
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system admin-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_ADMIN_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if admin ingressgateway needs an update"
            mute: true
            setVariables:
              - name: ADMIN_INGRESS_UPDATE
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system tenant-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_TENANT_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if tenant ingressgateway needs an update"
            mute: true
            setVariables:
              - name: TENANT_INGRESS_UPDATE
  - name: dubbd-upgrade
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              if [ "${ZARF_VAR_IS_UPGRADE}" = "true" ]; then
                if [ "${ZARF_VAR_ADMIN_INGRESS_UPDATE}" = "true" ]; then
                  ./zarf tools kubectl delete svc -n istio-system admin-ingressgateway
                  echo "Admin ingress gateway configuration was updated. You may need to update DNS records to point to the newly provisioned loadbalancer."
                  echo "The new hostname can be pulled with: zarf tools kubectl get svc -n istio-system admin-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                fi
                if [ "${ZARF_VAR_TENANT_INGRESS_UPDATE}" = "true" ]; then
                  ./zarf tools kubectl delete svc -n istio-system tenant-ingressgateway
                  echo "Tenant ingress gateway configuration was updated. You may need to update DNS records to point to the newly provisioned loadbalancer."
                  echo "The new hostname can be pulled with: zarf tools kubectl get svc -n istio-system tenant-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                fi
              fi
            description: "Perform DUBBD upgrade steps"
