# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: uds-core-aws
  description: "Defense Unicorns Big Bang Distro"
  # x-release-please-start-version
  version: "0.3.0"
  # x-release-please-end
  url: https://p1.dso.mil/products/big-bang
  image: https://p1.dso.mil/img/Big_Bang_Color_Logo_White_text.de14c793.webp
  # Big Bang / Iron Bank are only amd64
  architecture: amd64
  authors: "@runyontr"
  source: https://github.com/defenseunicorns/uds-package-dubbd
  documentation: https://github.com/defenseunicorns/uds-package-dubbd
  vendor: Defense Unicorns

variables:
  - name: TERRAFORM_VERSION
  - name: TERRAFORM_PROVIDER_AWS_VERSION

  - name: ZARF_VERSION

  - name: STATE_BUCKET_NAME
    description: "Name of the pre-existing Terraform state S3 bucket"
  - name: STATE_KEY
    description: "Path to the state file key in the state bucket"
  - name: STATE_DYNAMODB_TABLE_NAME
    description: "Name of the DynamoDB table used for Terraform state locking"
  - name: REGION
    description: "The AWS region to run the Terraform in"

  - name: PRIVATE_ADMIN_LB
    description: "Provision a private/internal load balancer for the admin ingress gateway"
    default: "true"
  - name: PRIVATE_TENANT_LB
    description: "Provision a private/internal load balancer for the tenant ingress gateway"
    default: "true"

  - name: EPHEMERAL
    description: "Set whether the cluster should be considered ephemeral - if true all resources will be force destroyed on removal"
    default: "false"
  - name: LOKI_FORCE_DESTROY
    description: "If set to true, delete the S3 bucket and corresponding KMS key associated with the Loki bucket. Overrides ephemeral setting."
  - name: PVC_RECLAIM_POLICY
    description: "Affects DUBBD's default storage class reclaimPolicy, either `Retain` or `Delete`. No effect if EBS CSI Driver is not installed. Overrides ephemeral setting."

  - name: EXEMPT_NAMESPACES
    description: "List of namespaces to be exempt from cluster policies (must contain zarf)"
    default: '[ "zarf", "calico-apiserver", "calico-system", "tigera-operator" ]'

  - name: VPC_CIDR
    description: "VPC CIDR block"
  - name: VPC_ID
    description: "VPC ID to deploy the cluster"
  - name: PRIVATE_SUBNETS
    description: "Private subnet IDs for cluster as a comma-separated string"
  - name: PUBLIC_SUBNETS
    description: "Public subnet IDs for cluster as a comma-separated string"

  # EKS Variables
  - name: NAME
    description: "Cluster name to prefix in front of resources"
    default: "bigbang"
  - name: CLUSTER_ENDPOINT_PUBLIC_ACCESS
    description: "Whether or not to allow public access to the cluster."
    default: "false"

components:
  - name: set-ephemeral
    required: true
    import:
      path: ../dubbd-aws
  - name: download-terraform
    required: true
    actions:
      onDeploy:
        after:
          - cmd: rm -f run/loki/terraform || true
            description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: "./extract-terraform.sh ###ZARF_PKG_TMPL_TERRAFORM_VERSION### ###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###"
          # - cmd: rm -rf tmp
    files:
      - source: ../extract.sh
        target: extract-terraform.sh
        executable: true
      # terraform binary into zarf package
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
  - name: prepare-eks-module
    required: true
    import:
      path: ../eks
  - name: execute-eks-module
    required: true
    import:
      path: ../eks
  - name: output-eks-module
    required: true
    import:
      path: ../eks
  - name: preflight
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: loki-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: ../loki
      onDeploy:
        before:
          - cmd: mkdir -p run/loki
    files:
      - source: ../loki/.terraform
        target: run/loki/.terraform
      - source: ../loki/main.tf
        target: run/loki/main.tf
      - source: ../loki/variables.tf
        target: run/loki/variables.tf
      - source: ../loki/output.tf
        target: run/loki/output.tf
      - source: ../loki/terraform.tfvars
        target: run/loki/terraform.tfvars
  - name: loki-bucket
    required: true
    actions:
      onDeploy:
        before:
          - cmd: "test -d ./loki/ && chmod -R ugo+rwx ./loki/ || echo $?"
            dir: run
          - cmd: |
              terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=loki-${ZARF_VAR_STATE_KEY}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/loki
          - cmd: "terraform plan"
            dir: run/loki
          - cmd: sleep 15 #time to review
          - cmd: "terraform apply -auto-approve"
            dir: run/loki
      onRemove:
        before:
          - cmd: |
              if [ -d "run/loki" ]; then
                cd run/loki
                if [ "$(terraform output force_destroy)" = true ]; then
                  terraform destroy -auto-approve
                else
                  echo "Skipping remove, force_destroy is set to false"
                fi
              else
                echo "Cannot remove: run/loki directory does not exist"
              fi
  - name: outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: "terraform output -raw s3_bucket"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_BUCKET
          - cmd: "terraform output -raw aws_region"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_AWS_REGION
          - cmd: "terraform output -raw irsa_role"
            dir: run/loki
            setVariables:
              - name: LOKI_S3_ROLE_ARN
  - name: route53-policy-pre
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo "route53-policy"
            setVariables:
              - name: STATE_KEY_PREFIX
          - cmd: echo "${ZARF_VAR_STATE_KEY_PREFIX}-${ZARF_VAR_STATE_KEY}"
            setVariables:
              - name: ROUTE53_POLICY_STATE_KEY
  - name: route53-policy-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: ../route53-policy
    files:
      - source: ../route53-policy/.terraform
        target: run/route53-policy/.terraform
      - source: ../route53-policy/main.tf
        target: run/route53-policy/main.tf
      - source: ../route53-policy/variables.tf
        target: run/route53-policy/variables.tf
      - source: ../route53-policy/output.tf
        target: run/route53-policy/output.tf
      - source: ../route53-policy/terraform.tfvars
        target: run/route53-policy/terraform.tfvars
  - name: execute-route53-policy-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: "test -d ./route53-policy/ && chmod -R ugo+rwx ./route53-policy/ || echo $?"
            dir: run
          - cmd: |
              terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_ROUTE53_POLICY_STATE_KEY}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/route53-policy
          - cmd: "terraform plan"
            dir: run/route53-policy
          - cmd: sleep 15 #time to review
          - cmd: "terraform apply -auto-approve"
            dir: run/route53-policy
      onRemove:
        before:
          - cmd: |
              if [ -d "run/route53-policy" ]; then
                cd run/route53-policy
                terraform destroy -auto-approve
              else
                echo "Cannot remove: run/route53-policy directory does not exist"
              fi
  - name: route53-policy-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: "terraform output -raw route53_role_arn"
            dir: run/route53-policy
            setVariables:
              - name: ROUTE53_ROLE_ARN
  - name: storage-class
    required: true
    import:
      path: ../dubbd-aws
    actions:
      onDeploy:
        after:
          - cmd: |
              pre_default_sc=$(./zarf tools kubectl get storageclass --output=jsonpath='{range .items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")]}{.metadata.name}{end}')
              ./zarf tools kubectl patch storageclass ${pre_default_sc} -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}' || true
              ./zarf tools kubectl patch storageclass dubbd-default-sc -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}' || true
            mute: true
            description: "Update DUBBD storage class to cluster default"
  - name: zarf-init
    required: true
    actions:
      onCreate:
        before:
          - cmd: "wget -nc https://github.com/defenseunicorns/zarf/releases/download/###ZARF_PKG_TMPL_ZARF_VERSION###/zarf-init-amd64-###ZARF_PKG_TMPL_ZARF_VERSION###.tar.zst"
            mute: true
            description: "Download Zarf Init Package"
      onDeploy:
        after:
          - cmd: mkdir -p run/zarf-init
          - cmd: ./zarf p deploy ./zarf-init-amd64-###ZARF_PKG_TMPL_ZARF_VERSION###.tar.zst --components git-server --confirm
            dir: run/zarf-init
    files:
      - source: zarf-init-amd64-###ZARF_PKG_TMPL_ZARF_VERSION###.tar.zst
        target: run/zarf-init/zarf-init-amd64-###ZARF_PKG_TMPL_ZARF_VERSION###.tar.zst
  - name: load-certs
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: download-flux
    required: true
    import:
      path: ../../defense-unicorns-distro
  - name: dubbd-pre-upgrade
    required: true
    import:
      path: ../dubbd-aws
  - name: bigbang
    required: true
    import:
      path: ../../defense-unicorns-distro
    extensions:
      bigbang:
        version: "###ZARF_PKG_TMPL_BIGBANG_VERSION###"
        valuesFiles:
          - ../values/aws-istio.yaml
          - ../values/aws-loki.yaml
    actions:
      onDeploy:
        before:
          - cmd: |
              ./zarf tools kubectl label ns -l app.kubernetes.io/part-of=dubbd-aws zarf.dev/agent-
            description: "Remove Zarf ignore namespace labels for DUBBD AWS"
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system admin-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_ADMIN_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if admin ingressgateway needs an update"
            mute: true
            setVariables:
              - name: ADMIN_INGRESS_UPDATE
          - cmd: |
              if [ "$(./zarf tools kubectl get svc -n istio-system tenant-ingressgateway -o jsonpath='{.metadata.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-internal}' 2>/dev/null)" = "${ZARF_VAR_PRIVATE_TENANT_LB}" ]; then
                echo false
              else
                echo true
              fi
            description: "Check if tenant ingressgateway needs an update"
            mute: true
            setVariables:
              - name: TENANT_INGRESS_UPDATE
  - name: external-dns-k8s-manifests
    required: true
    import:
      path: ../external-dns
  - name: external-dns-chart
    required: true
    import:
      path: ../external-dns
  - name: dubbd-post-upgrade
    required: true
    import:
      path: ../dubbd-aws
  - name: destroy-eks
    required: true
    import:
      path: ../eks
